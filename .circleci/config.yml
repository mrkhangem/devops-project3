version: 2.1

commands:
  destroy_environment:
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"


  revert-migrations:
    description: Revert the last migration
    parameters:
      workflow_id:
          type: string      
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            export SUCCESS=$(curl --insecure  https://kvdb.io/Qw8boFdiqkmPwti7CBymU6/migration_<< parameters.workflow_id >>)
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi  
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test

                
  test-backend:
    docker:
      - image: circleci/node:13.8.0   
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0   
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Fix vulnerabilities on frontend dependencies abd rescan
          command: |
            cd frontend
            npm install
            npm audit fix --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
  
  scan-backend:
    docker:
      - image: circleci/node:13.8.0   
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Fix vulnerabilities on backend dependencies abd rescan
          command: |
            cd backend
            npm install
            npm audit fix
            

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar && yum install -y gzip 
      - run: 
          name: create backend-stack
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople

      - run: 
          name: create frontend-stack
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople
            
      - run:
          name: Get public IP of previous EC2 for inventory file
          command: |
            export EC2_tagged=backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=${EC2_tagged}" "Name=instance-state-name,Values=running" \
            --output text >> ./.circleci/ansible/inventory.txt

      - destroy_environment

      - run:
          name: Create workspace directory 
          command: |
            mkdir -p ~/workspace
            cp ./.circleci/ansible/inventory.txt ~/workspace/inventory.txt
            cat ~/workspace/inventory.txt

      - persist_to_workspace:
          root: ~/workspace
          paths: 
            - inventory.txt
            
  configure-infrastructure:
    docker:
      - image: python:3.9.13
    steps:
      - checkout

      - add_ssh_keys:
          fingerprints: 
            - "72:4d:c4:31:db:d1:df:3e:e8:48:bb:f7:95:28:97:3a"

      - attach_workspace:
          at: ~/workspace

      - run:
          name: Install dependencies
          command: |
            pip install awscli
            pip install --upgrade --user ansible

      - run:
          name: Config server
          command: |
              export PATH=$PATH:~/.local/bin
              export ANSIBLE_HOST_KEY_CHECKING=False
              cd .circleci/ansible
              ansible-playbook -i ~/workspace/inventory.txt configure-server.yml
              
      - destroy_environment

  run-migrations:
    docker:
      - image: circleci/node:13.8.0 
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: Install aws cli
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt

      - run:
          name: Send migration status to kvdb.io OR memstash.io
          command: |   
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt ; \
              then \
                curl --insecure https://kvdb.io/Qw8boFdiqkmPwti7CBymU6/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1' ; \
              fi
 
      - destroy_environment
  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]

      - run:
          name: Install tar
          command: |
            yum install -y tar gzip                         
      - attach_workspace:
          at: ~/workspace 

      - run:
          name: Install dependencies
          command: |
            yum install sudo -y
            curl -sL https://rpm.nodesource.com/setup_13.x | sudo -E bash - 
            yum install -y nodejs         

      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(tail -1 ~/workspace/inventory.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env          

      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

      - destroy_environment

      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
                    
  deploy-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - "72:4d:c4:31:db:d1:df:3e:e8:48:bb:f7:95:28:97:3a"

      - attach_workspace:
          at: ~/workspace

      - restore_cache:
          keys: [backend-build]

      - run:
          name: Install awscli
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

      - run:
          name: Install ansible
          command: |
            sudo apt-get update
            sudo apt-get install software-properties-common
            sudo apt-get install ansible

      - run: mkdir -p /tmp

      - run:
          name: Deploy backend
          command: |
              cd backend  
              echo TYPEORM_CONNECTION=postgres >> ".env"
              echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> ".env"
              echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> ".env"
              echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> ".env"
              echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
              echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
              echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
              echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
              echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
              npm i
              npm run build
              cd ..
              tar -C backend -czvf /tmp/artifact.tar.gz .
              export ANSIBLE_HOST_KEY_CHECKING=False
              cd .circleci/ansible
              ansible-playbook -i ~/workspace/inventory.txt deploy-backend.yml

      - destroy_environment

      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    docker:
      - image: python:3.9.13-alpine
        user: root
    steps:
      - checkout
      - attach_workspace:
          at: ~/workspace
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install awscli
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(tail -1 ~/workspace/inventory.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl --insecure "${API_URL}/api/status" | grep "ok"
            then
                echo "Success"
                return 0
            else
                echo "Failed"
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
              URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
              echo ${URL}
              if curl -s --insecure ${URL} | grep "Welcome"
              then
                echo "Success"
                return 0
              else
                echo "Failed"
                return 1
              fi

      - destroy_environment
 
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout

      - run:
          name: install tar gzip
          command: |
            yum install -y tar gzip

      - attach_workspace:
          at: ~/workspace      
      
      - run:
          name: Fetch the Old workflow ID
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text > ~/workspace/OldWorkflowID.txt
      
      - persist_to_workspace:
          root: ~/workspace
          paths:
            - OldWorkflowID.txt
      - run: cat ~/workspace/OldWorkflowID.txt
      - run: 
          name: Promotion Phase
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
            
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout

      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip 
            
      - attach_workspace:
          at: ~/workspace
      
      - run: 
          name: Clear and delete old s3 bucket and old cloudformation stack
          command: |
            export OldWorkflowID=$(cat ~/workspace/OldWorkflowID.txt)
            echo ${OldWorkflowID}
            echo ${CIRCLE_WORKFLOW_ID:0:7}
            if [ -z "${OldWorkflowID}"] || [ "${CIRCLE_WORKFLOW_ID:0:7}" == "${OldWorkflowID}" ];
            then
              echo "Cannot clean up"
            else
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi

 
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend,test-backend,scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]